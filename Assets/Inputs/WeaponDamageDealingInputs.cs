//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/WeaponDamageDealingInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WeaponDamageDealingInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WeaponDamageDealingInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WeaponDamageDealingInputs"",
    ""maps"": [
        {
            ""name"": ""Melee"",
            ""id"": ""2a4baafc-ad05-4e57-875e-00263713f29e"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e78e1da6-5752-4913-b177-757fa8c966c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d53e0a5-0463-44f5-a303-67179141b570"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Range"",
            ""id"": ""542e10d6-eea0-4125-9b35-67405739ce9e"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""0461728d-c6d3-4b72-ace7-e43fd97fe841"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeFireMode"",
                    ""type"": ""Button"",
                    ""id"": ""a291d6dd-cd8f-4f40-9f58-677f0f3cb41e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""8e4e8437-85f9-470d-87fd-168f7d710f0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f9b4df5-c153-470d-a911-b3022e9dcdc6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f4d29d3-55b6-4139-918d-1030a2ddac31"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeFireMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0732781-cc9c-4ccf-8cbe-db4090b7aee5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Melee
        m_Melee = asset.FindActionMap("Melee", throwIfNotFound: true);
        m_Melee_Attack = m_Melee.FindAction("Attack", throwIfNotFound: true);
        // Range
        m_Range = asset.FindActionMap("Range", throwIfNotFound: true);
        m_Range_Shoot = m_Range.FindAction("Shoot", throwIfNotFound: true);
        m_Range_ChangeFireMode = m_Range.FindAction("ChangeFireMode", throwIfNotFound: true);
        m_Range_Reload = m_Range.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Melee
    private readonly InputActionMap m_Melee;
    private IMeleeActions m_MeleeActionsCallbackInterface;
    private readonly InputAction m_Melee_Attack;
    public struct MeleeActions
    {
        private @WeaponDamageDealingInputs m_Wrapper;
        public MeleeActions(@WeaponDamageDealingInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Melee_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Melee; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MeleeActions set) { return set.Get(); }
        public void SetCallbacks(IMeleeActions instance)
        {
            if (m_Wrapper.m_MeleeActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_MeleeActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MeleeActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MeleeActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_MeleeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public MeleeActions @Melee => new MeleeActions(this);

    // Range
    private readonly InputActionMap m_Range;
    private IRangeActions m_RangeActionsCallbackInterface;
    private readonly InputAction m_Range_Shoot;
    private readonly InputAction m_Range_ChangeFireMode;
    private readonly InputAction m_Range_Reload;
    public struct RangeActions
    {
        private @WeaponDamageDealingInputs m_Wrapper;
        public RangeActions(@WeaponDamageDealingInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Range_Shoot;
        public InputAction @ChangeFireMode => m_Wrapper.m_Range_ChangeFireMode;
        public InputAction @Reload => m_Wrapper.m_Range_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Range; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RangeActions set) { return set.Get(); }
        public void SetCallbacks(IRangeActions instance)
        {
            if (m_Wrapper.m_RangeActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_RangeActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_RangeActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_RangeActionsCallbackInterface.OnShoot;
                @ChangeFireMode.started -= m_Wrapper.m_RangeActionsCallbackInterface.OnChangeFireMode;
                @ChangeFireMode.performed -= m_Wrapper.m_RangeActionsCallbackInterface.OnChangeFireMode;
                @ChangeFireMode.canceled -= m_Wrapper.m_RangeActionsCallbackInterface.OnChangeFireMode;
                @Reload.started -= m_Wrapper.m_RangeActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_RangeActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_RangeActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_RangeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ChangeFireMode.started += instance.OnChangeFireMode;
                @ChangeFireMode.performed += instance.OnChangeFireMode;
                @ChangeFireMode.canceled += instance.OnChangeFireMode;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public RangeActions @Range => new RangeActions(this);
    public interface IMeleeActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IRangeActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnChangeFireMode(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
